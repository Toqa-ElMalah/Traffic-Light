
Traffic Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000982  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000982  00000a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800092  00800092  00000a48  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  000011a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e27  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000042e  00000000  00000000  000020c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000808  00000000  00000000  000024f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00002d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000340  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008dd  00000000  00000000  0000326c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 39       	cpi	r26, 0x93	; 147
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ef 03 	call	0x7de	; 0x7de <main>
  8a:	0c 94 bf 04 	jmp	0x97e	; 0x97e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macrous.h"

void DIO_vsetPINDir (unsigned char port,unsigned char pinnumber,unsigned char direction){
	switch (port){
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	51 f1       	breq	.+84     	; 0xea <DIO_vsetPINDir+0x58>
  96:	83 34       	cpi	r24, 0x43	; 67
  98:	20 f4       	brcc	.+8      	; 0xa2 <DIO_vsetPINDir+0x10>
  9a:	81 34       	cpi	r24, 0x41	; 65
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_vsetPINDir+0xe>
  9e:	7b c0       	rjmp	.+246    	; 0x196 <DIO_vsetPINDir+0x104>
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <DIO_vsetPINDir+0x1e>
  a2:	83 34       	cpi	r24, 0x43	; 67
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	3e c0       	rjmp	.+124    	; 0x124 <DIO_vsetPINDir+0x92>
  a8:	84 34       	cpi	r24, 0x44	; 68
  aa:	09 f0       	breq	.+2      	; 0xae <DIO_vsetPINDir+0x1c>
  ac:	74 c0       	rjmp	.+232    	; 0x196 <DIO_vsetPINDir+0x104>
  ae:	57 c0       	rjmp	.+174    	; 0x15e <DIO_vsetPINDir+0xcc>
		
		case'A':
		if (direction==1){
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	69 f4       	brne	.+26     	; 0xce <DIO_vsetPINDir+0x3c>
			SET_BIT(DDRA,pinnumber);
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_vsetPINDir+0x30>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_vsetPINDir+0x2c>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	6a bb       	out	0x1a, r22	; 26
  cc:	08 95       	ret
		}
		else
		CLR_BIT(DDRA,pinnumber);
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac 01       	movw	r20, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPINDir+0x4a>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPINDir+0x46>
  e0:	ba 01       	movw	r22, r20
  e2:	60 95       	com	r22
  e4:	62 23       	and	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
	
	break;
	
	case'B':
	if (direction==1){
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	69 f4       	brne	.+26     	; 0x108 <DIO_vsetPINDir+0x76>
		SET_BIT(DDRB,pinnumber);
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vsetPINDir+0x6a>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vsetPINDir+0x66>
 100:	ba 01       	movw	r22, r20
 102:	62 2b       	or	r22, r18
 104:	67 bb       	out	0x17, r22	; 23
 106:	08 95       	ret
	}
	else
	CLR_BIT(DDRB,pinnumber);
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vsetPINDir+0x84>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vsetPINDir+0x80>
 11a:	ba 01       	movw	r22, r20
 11c:	60 95       	com	r22
 11e:	62 23       	and	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
   break;
 
   case'C':
    if (direction==1){
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	69 f4       	brne	.+26     	; 0x142 <DIO_vsetPINDir+0xb0>
	 SET_BIT(DDRC,pinnumber);
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vsetPINDir+0xa4>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vsetPINDir+0xa0>
 13a:	ba 01       	movw	r22, r20
 13c:	62 2b       	or	r22, r18
 13e:	64 bb       	out	0x14, r22	; 20
 140:	08 95       	ret
  }
   else
    CLR_BIT(DDRC,pinnumber);
 142:	24 b3       	in	r18, 0x14	; 20
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	ba 01       	movw	r22, r20
 156:	60 95       	com	r22
 158:	62 23       	and	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
	break;
	
	case'D':
	if (direction==1){
 15e:	41 30       	cpi	r20, 0x01	; 1
 160:	69 f4       	brne	.+26     	; 0x17c <DIO_vsetPINDir+0xea>
		SET_BIT(DDRD,pinnumber);
 162:	21 b3       	in	r18, 0x11	; 17
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ac 01       	movw	r20, r24
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_vsetPINDir+0xde>
 16c:	44 0f       	add	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_vsetPINDir+0xda>
 174:	ba 01       	movw	r22, r20
 176:	62 2b       	or	r22, r18
 178:	61 bb       	out	0x11, r22	; 17
 17a:	08 95       	ret
	}
	else
	CLR_BIT(DDRD,pinnumber);
 17c:	21 b3       	in	r18, 0x11	; 17
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vsetPINDir+0xf8>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vsetPINDir+0xf4>
 18e:	ba 01       	movw	r22, r20
 190:	60 95       	com	r22
 192:	62 23       	and	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret

00000198 <DIO_write>:
}
}

void DIO_write (unsigned char portname,unsigned char pinnumber,unsigned char outputvalue){
	
	switch (portname){
 198:	82 34       	cpi	r24, 0x42	; 66
 19a:	51 f1       	breq	.+84     	; 0x1f0 <DIO_write+0x58>
 19c:	83 34       	cpi	r24, 0x43	; 67
 19e:	20 f4       	brcc	.+8      	; 0x1a8 <DIO_write+0x10>
 1a0:	81 34       	cpi	r24, 0x41	; 65
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <DIO_write+0xe>
 1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_write+0x104>
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <DIO_write+0x1e>
 1a8:	83 34       	cpi	r24, 0x43	; 67
 1aa:	09 f4       	brne	.+2      	; 0x1ae <DIO_write+0x16>
 1ac:	3e c0       	rjmp	.+124    	; 0x22a <DIO_write+0x92>
 1ae:	84 34       	cpi	r24, 0x44	; 68
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_write+0x1c>
 1b2:	74 c0       	rjmp	.+232    	; 0x29c <DIO_write+0x104>
 1b4:	57 c0       	rjmp	.+174    	; 0x264 <DIO_write+0xcc>
		
		case'A':
		if (outputvalue==1){
 1b6:	41 30       	cpi	r20, 0x01	; 1
 1b8:	69 f4       	brne	.+26     	; 0x1d4 <DIO_write+0x3c>
			SET_BIT(PORTA,pinnumber);
 1ba:	2b b3       	in	r18, 0x1b	; 27
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	ac 01       	movw	r20, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_write+0x30>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_write+0x2c>
 1cc:	ba 01       	movw	r22, r20
 1ce:	62 2b       	or	r22, r18
 1d0:	6b bb       	out	0x1b, r22	; 27
 1d2:	08 95       	ret
		}
		else
		CLR_BIT(PORTA,pinnumber);
 1d4:	2b b3       	in	r18, 0x1b	; 27
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x4a>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x46>
 1e6:	ba 01       	movw	r22, r20
 1e8:	60 95       	com	r22
 1ea:	62 23       	and	r22, r18
 1ec:	6b bb       	out	0x1b, r22	; 27
 1ee:	08 95       	ret
		
		break;
		
		case'B':
		if (outputvalue==1){
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	69 f4       	brne	.+26     	; 0x20e <DIO_write+0x76>
			SET_BIT(PORTB,pinnumber);
 1f4:	28 b3       	in	r18, 0x18	; 24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	ac 01       	movw	r20, r24
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_write+0x6a>
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_write+0x66>
 206:	ba 01       	movw	r22, r20
 208:	62 2b       	or	r22, r18
 20a:	68 bb       	out	0x18, r22	; 24
 20c:	08 95       	ret
		}
		else
		CLR_BIT(PORTB,pinnumber);
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ac 01       	movw	r20, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_write+0x84>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_write+0x80>
 220:	ba 01       	movw	r22, r20
 222:	60 95       	com	r22
 224:	62 23       	and	r22, r18
 226:	68 bb       	out	0x18, r22	; 24
 228:	08 95       	ret
		break;
		
		case'C':
		if (outputvalue==1){
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	69 f4       	brne	.+26     	; 0x248 <DIO_write+0xb0>
			SET_BIT(PORTC,pinnumber);
 22e:	25 b3       	in	r18, 0x15	; 21
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_write+0xa4>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_write+0xa0>
 240:	ba 01       	movw	r22, r20
 242:	62 2b       	or	r22, r18
 244:	65 bb       	out	0x15, r22	; 21
 246:	08 95       	ret
		}
		else
		CLR_BIT(PORTC,pinnumber);
 248:	25 b3       	in	r18, 0x15	; 21
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	ac 01       	movw	r20, r24
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_write+0xbe>
 252:	44 0f       	add	r20, r20
 254:	55 1f       	adc	r21, r21
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_write+0xba>
 25a:	ba 01       	movw	r22, r20
 25c:	60 95       	com	r22
 25e:	62 23       	and	r22, r18
 260:	65 bb       	out	0x15, r22	; 21
 262:	08 95       	ret
		break;
		
		case'D':
		if (outputvalue==1){
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	69 f4       	brne	.+26     	; 0x282 <DIO_write+0xea>
			SET_BIT(PORTD,pinnumber);
 268:	22 b3       	in	r18, 0x12	; 18
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	ac 01       	movw	r20, r24
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_write+0xde>
 272:	44 0f       	add	r20, r20
 274:	55 1f       	adc	r21, r21
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_write+0xda>
 27a:	ba 01       	movw	r22, r20
 27c:	62 2b       	or	r22, r18
 27e:	62 bb       	out	0x12, r22	; 18
 280:	08 95       	ret
		}
		else
		CLR_BIT(PORTD,pinnumber);
 282:	22 b3       	in	r18, 0x12	; 18
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	ac 01       	movw	r20, r24
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_write+0xf8>
 28c:	44 0f       	add	r20, r20
 28e:	55 1f       	adc	r21, r21
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_write+0xf4>
 294:	ba 01       	movw	r22, r20
 296:	60 95       	com	r22
 298:	62 23       	and	r22, r18
 29a:	62 bb       	out	0x12, r22	; 18
 29c:	08 95       	ret

0000029e <DIO_u8read>:
	}
}

unsigned char DIO_u8read (unsigned char portname,unsigned char pinnumber){
	unsigned char return_value = 0;
	switch(portname){
 29e:	82 34       	cpi	r24, 0x42	; 66
 2a0:	f1 f0       	breq	.+60     	; 0x2de <DIO_u8read+0x40>
 2a2:	83 34       	cpi	r24, 0x43	; 67
 2a4:	20 f4       	brcc	.+8      	; 0x2ae <DIO_u8read+0x10>
 2a6:	81 34       	cpi	r24, 0x41	; 65
 2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_u8read+0xe>
 2aa:	4f c0       	rjmp	.+158    	; 0x34a <DIO_u8read+0xac>
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <DIO_u8read+0x1c>
 2ae:	83 34       	cpi	r24, 0x43	; 67
 2b0:	41 f1       	breq	.+80     	; 0x302 <DIO_u8read+0x64>
 2b2:	84 34       	cpi	r24, 0x44	; 68
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <DIO_u8read+0x1a>
 2b6:	49 c0       	rjmp	.+146    	; 0x34a <DIO_u8read+0xac>
 2b8:	36 c0       	rjmp	.+108    	; 0x326 <DIO_u8read+0x88>
		
		case'A':
		return_value = READ_BIT(PINA,pinnumber);
 2ba:	29 b3       	in	r18, 0x19	; 25
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	06 2e       	mov	r0, r22
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8read+0x2a>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8read+0x26>
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	82 23       	and	r24, r18
 2d0:	93 23       	and	r25, r19
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8read+0x3a>
 2d4:	95 95       	asr	r25
 2d6:	87 95       	ror	r24
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8read+0x36>
		break;
 2dc:	08 95       	ret
		case'B':
		return_value = READ_BIT(PINB,pinnumber);
 2de:	26 b3       	in	r18, 0x16	; 22
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	06 2e       	mov	r0, r22
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_u8read+0x4e>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_u8read+0x4a>
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	82 23       	and	r24, r18
 2f4:	93 23       	and	r25, r19
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_u8read+0x5e>
 2f8:	95 95       	asr	r25
 2fa:	87 95       	ror	r24
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_u8read+0x5a>
		break;
 300:	08 95       	ret
		case'C':
		return_value = READ_BIT(PINC,pinnumber);
 302:	23 b3       	in	r18, 0x13	; 19
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	06 2e       	mov	r0, r22
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_u8read+0x72>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_u8read+0x6e>
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	82 23       	and	r24, r18
 318:	93 23       	and	r25, r19
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_u8read+0x82>
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_u8read+0x7e>
		break;
 324:	08 95       	ret
		case'D':
		return_value = READ_BIT(PIND,pinnumber);
 326:	20 b3       	in	r18, 0x10	; 16
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	06 2e       	mov	r0, r22
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8read+0x96>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_u8read+0x92>
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	82 23       	and	r24, r18
 33c:	93 23       	and	r25, r19
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_u8read+0xa6>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_u8read+0xa2>
		break;
 348:	08 95       	ret
		break;
	}
}

unsigned char DIO_u8read (unsigned char portname,unsigned char pinnumber){
	unsigned char return_value = 0;
 34a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_value;
}
 34c:	08 95       	ret

0000034e <DIO_toggle>:

void DIO_toggle (unsigned char portname,unsigned char pinnumber){
	switch(portname){
 34e:	82 34       	cpi	r24, 0x42	; 66
 350:	b9 f0       	breq	.+46     	; 0x380 <DIO_toggle+0x32>
 352:	83 34       	cpi	r24, 0x43	; 67
 354:	18 f4       	brcc	.+6      	; 0x35c <DIO_toggle+0xe>
 356:	81 34       	cpi	r24, 0x41	; 65
 358:	c9 f5       	brne	.+114    	; 0x3cc <DIO_toggle+0x7e>
 35a:	05 c0       	rjmp	.+10     	; 0x366 <DIO_toggle+0x18>
 35c:	83 34       	cpi	r24, 0x43	; 67
 35e:	e9 f0       	breq	.+58     	; 0x39a <DIO_toggle+0x4c>
 360:	84 34       	cpi	r24, 0x44	; 68
 362:	a1 f5       	brne	.+104    	; 0x3cc <DIO_toggle+0x7e>
 364:	27 c0       	rjmp	.+78     	; 0x3b4 <DIO_toggle+0x66>
		case'A':
		TOG_BIT(PORTA,pinnumber);
 366:	2b b3       	in	r18, 0x1b	; 27
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	ac 01       	movw	r20, r24
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_toggle+0x26>
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_toggle+0x22>
 378:	ba 01       	movw	r22, r20
 37a:	62 27       	eor	r22, r18
 37c:	6b bb       	out	0x1b, r22	; 27
		break;
 37e:	08 95       	ret
		case'B':
		TOG_BIT(PORTB,pinnumber);
 380:	28 b3       	in	r18, 0x18	; 24
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	ac 01       	movw	r20, r24
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_toggle+0x40>
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_toggle+0x3c>
 392:	ba 01       	movw	r22, r20
 394:	62 27       	eor	r22, r18
 396:	68 bb       	out	0x18, r22	; 24
		break;
 398:	08 95       	ret
		case'C':
		TOG_BIT(PORTC,pinnumber);
 39a:	25 b3       	in	r18, 0x15	; 21
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	ac 01       	movw	r20, r24
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_toggle+0x5a>
 3a4:	44 0f       	add	r20, r20
 3a6:	55 1f       	adc	r21, r21
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_toggle+0x56>
 3ac:	ba 01       	movw	r22, r20
 3ae:	62 27       	eor	r22, r18
 3b0:	65 bb       	out	0x15, r22	; 21
		break;
 3b2:	08 95       	ret
		case'D':
		TOG_BIT(PORTD,pinnumber);
 3b4:	22 b3       	in	r18, 0x12	; 18
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	ac 01       	movw	r20, r24
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_toggle+0x74>
 3be:	44 0f       	add	r20, r20
 3c0:	55 1f       	adc	r21, r21
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_toggle+0x70>
 3c6:	ba 01       	movw	r22, r20
 3c8:	62 27       	eor	r22, r18
 3ca:	62 bb       	out	0x12, r22	; 18
 3cc:	08 95       	ret

000003ce <DIO_set_port_direction>:
		break;
	}
}

void DIO_set_port_direction (unsigned char portname,unsigned char direction){
	switch(portname){
 3ce:	82 34       	cpi	r24, 0x42	; 66
 3d0:	61 f0       	breq	.+24     	; 0x3ea <DIO_set_port_direction+0x1c>
 3d2:	83 34       	cpi	r24, 0x43	; 67
 3d4:	18 f4       	brcc	.+6      	; 0x3dc <DIO_set_port_direction+0xe>
 3d6:	81 34       	cpi	r24, 0x41	; 65
 3d8:	69 f4       	brne	.+26     	; 0x3f4 <DIO_set_port_direction+0x26>
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <DIO_set_port_direction+0x18>
 3dc:	83 34       	cpi	r24, 0x43	; 67
 3de:	39 f0       	breq	.+14     	; 0x3ee <DIO_set_port_direction+0x20>
 3e0:	84 34       	cpi	r24, 0x44	; 68
 3e2:	41 f4       	brne	.+16     	; 0x3f4 <DIO_set_port_direction+0x26>
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <DIO_set_port_direction+0x24>
		case'A':
		DDRA=direction;
 3e6:	6a bb       	out	0x1a, r22	; 26
		break;
 3e8:	08 95       	ret
		case'B':
		DDRB=direction;
 3ea:	67 bb       	out	0x17, r22	; 23
		break;
 3ec:	08 95       	ret
		case'C':
		DDRC=direction;
 3ee:	64 bb       	out	0x14, r22	; 20
		break;
 3f0:	08 95       	ret
		case'D':
		DDRD=direction;
 3f2:	61 bb       	out	0x11, r22	; 17
 3f4:	08 95       	ret

000003f6 <DIO_write_port>:
		break;
	}		
}

void DIO_write_port (unsigned char portname,unsigned char portvalue){
	switch(portname){
 3f6:	82 34       	cpi	r24, 0x42	; 66
 3f8:	61 f0       	breq	.+24     	; 0x412 <DIO_write_port+0x1c>
 3fa:	83 34       	cpi	r24, 0x43	; 67
 3fc:	18 f4       	brcc	.+6      	; 0x404 <DIO_write_port+0xe>
 3fe:	81 34       	cpi	r24, 0x41	; 65
 400:	69 f4       	brne	.+26     	; 0x41c <DIO_write_port+0x26>
 402:	05 c0       	rjmp	.+10     	; 0x40e <DIO_write_port+0x18>
 404:	83 34       	cpi	r24, 0x43	; 67
 406:	39 f0       	breq	.+14     	; 0x416 <DIO_write_port+0x20>
 408:	84 34       	cpi	r24, 0x44	; 68
 40a:	41 f4       	brne	.+16     	; 0x41c <DIO_write_port+0x26>
 40c:	06 c0       	rjmp	.+12     	; 0x41a <DIO_write_port+0x24>
		case'A':
		PORTA=portvalue;
 40e:	6b bb       	out	0x1b, r22	; 27
		break;
 410:	08 95       	ret
		case'B':
		PORTB=portvalue;
 412:	68 bb       	out	0x18, r22	; 24
		break;
 414:	08 95       	ret
		case'C':
		PORTC=portvalue;
 416:	65 bb       	out	0x15, r22	; 21
		break;
 418:	08 95       	ret
		case'D':
		PORTD=portvalue;
 41a:	62 bb       	out	0x12, r22	; 18
 41c:	08 95       	ret

0000041e <DIO_read_port>:
	}
}

unsigned char DIO_read_port (unsigned char portname){
	unsigned char return_val=0;
	switch(portname){
 41e:	82 34       	cpi	r24, 0x42	; 66
 420:	61 f0       	breq	.+24     	; 0x43a <DIO_read_port+0x1c>
 422:	83 34       	cpi	r24, 0x43	; 67
 424:	18 f4       	brcc	.+6      	; 0x42c <DIO_read_port+0xe>
 426:	81 34       	cpi	r24, 0x41	; 65
 428:	71 f4       	brne	.+28     	; 0x446 <DIO_read_port+0x28>
 42a:	05 c0       	rjmp	.+10     	; 0x436 <DIO_read_port+0x18>
 42c:	83 34       	cpi	r24, 0x43	; 67
 42e:	39 f0       	breq	.+14     	; 0x43e <DIO_read_port+0x20>
 430:	84 34       	cpi	r24, 0x44	; 68
 432:	49 f4       	brne	.+18     	; 0x446 <DIO_read_port+0x28>
 434:	06 c0       	rjmp	.+12     	; 0x442 <DIO_read_port+0x24>
		case'A':
		return_val=PINA;
 436:	89 b3       	in	r24, 0x19	; 25
		break;
 438:	08 95       	ret
		case'B':
		return_val=PINB;
 43a:	86 b3       	in	r24, 0x16	; 22
		break;
 43c:	08 95       	ret
		case'C':
		return_val=PINC;
 43e:	83 b3       	in	r24, 0x13	; 19
		break;
 440:	08 95       	ret
		case'D':
		return_val=PIND;
 442:	80 b3       	in	r24, 0x10	; 16
		break;
 444:	08 95       	ret
		break;
	}
}

unsigned char DIO_read_port (unsigned char portname){
	unsigned char return_val=0;
 446:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_val;
}
 448:	08 95       	ret

0000044a <DIO_vconnectpullup>:

void DIO_vconnectpullup (char portname,char pinnumber,char connect_pullup){
	switch(portname){
 44a:	82 34       	cpi	r24, 0x42	; 66
 44c:	51 f1       	breq	.+84     	; 0x4a2 <DIO_vconnectpullup+0x58>
 44e:	83 34       	cpi	r24, 0x43	; 67
 450:	20 f4       	brcc	.+8      	; 0x45a <DIO_vconnectpullup+0x10>
 452:	81 34       	cpi	r24, 0x41	; 65
 454:	09 f0       	breq	.+2      	; 0x458 <DIO_vconnectpullup+0xe>
 456:	7b c0       	rjmp	.+246    	; 0x54e <DIO_vconnectpullup+0x104>
 458:	07 c0       	rjmp	.+14     	; 0x468 <DIO_vconnectpullup+0x1e>
 45a:	83 34       	cpi	r24, 0x43	; 67
 45c:	09 f4       	brne	.+2      	; 0x460 <DIO_vconnectpullup+0x16>
 45e:	3e c0       	rjmp	.+124    	; 0x4dc <DIO_vconnectpullup+0x92>
 460:	84 34       	cpi	r24, 0x44	; 68
 462:	09 f0       	breq	.+2      	; 0x466 <DIO_vconnectpullup+0x1c>
 464:	74 c0       	rjmp	.+232    	; 0x54e <DIO_vconnectpullup+0x104>
 466:	57 c0       	rjmp	.+174    	; 0x516 <DIO_vconnectpullup+0xcc>
		case'A':
		if (connect_pullup==1){
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	69 f4       	brne	.+26     	; 0x486 <DIO_vconnectpullup+0x3c>
			SET_BIT(PORTA,pinnumber);
 46c:	2b b3       	in	r18, 0x1b	; 27
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	ac 01       	movw	r20, r24
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_vconnectpullup+0x30>
 476:	44 0f       	add	r20, r20
 478:	55 1f       	adc	r21, r21
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_vconnectpullup+0x2c>
 47e:	ba 01       	movw	r22, r20
 480:	62 2b       	or	r22, r18
 482:	6b bb       	out	0x1b, r22	; 27
 484:	08 95       	ret
		}
		else{
			CLR_BIT(PORTA,pinnumber);
 486:	2b b3       	in	r18, 0x1b	; 27
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	ac 01       	movw	r20, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_vconnectpullup+0x4a>
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_vconnectpullup+0x46>
 498:	ba 01       	movw	r22, r20
 49a:	60 95       	com	r22
 49c:	62 23       	and	r22, r18
 49e:	6b bb       	out	0x1b, r22	; 27
 4a0:	08 95       	ret
      }
	  break;
	  case'B':
	  if (connect_pullup==1){
 4a2:	41 30       	cpi	r20, 0x01	; 1
 4a4:	69 f4       	brne	.+26     	; 0x4c0 <DIO_vconnectpullup+0x76>
		  SET_BIT(PORTB,pinnumber);
 4a6:	28 b3       	in	r18, 0x18	; 24
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	ac 01       	movw	r20, r24
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_vconnectpullup+0x6a>
 4b0:	44 0f       	add	r20, r20
 4b2:	55 1f       	adc	r21, r21
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_vconnectpullup+0x66>
 4b8:	ba 01       	movw	r22, r20
 4ba:	62 2b       	or	r22, r18
 4bc:	68 bb       	out	0x18, r22	; 24
 4be:	08 95       	ret
	  }
	  else{
		  CLR_BIT(PORTB,pinnumber);
 4c0:	28 b3       	in	r18, 0x18	; 24
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	ac 01       	movw	r20, r24
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_vconnectpullup+0x84>
 4ca:	44 0f       	add	r20, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_vconnectpullup+0x80>
 4d2:	ba 01       	movw	r22, r20
 4d4:	60 95       	com	r22
 4d6:	62 23       	and	r22, r18
 4d8:	68 bb       	out	0x18, r22	; 24
 4da:	08 95       	ret
	  }
	  break;
	  case'C':
	  if (connect_pullup==1){
 4dc:	41 30       	cpi	r20, 0x01	; 1
 4de:	69 f4       	brne	.+26     	; 0x4fa <DIO_vconnectpullup+0xb0>
		  SET_BIT(PORTC,pinnumber);
 4e0:	25 b3       	in	r18, 0x15	; 21
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	ac 01       	movw	r20, r24
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_vconnectpullup+0xa4>
 4ea:	44 0f       	add	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_vconnectpullup+0xa0>
 4f2:	ba 01       	movw	r22, r20
 4f4:	62 2b       	or	r22, r18
 4f6:	65 bb       	out	0x15, r22	; 21
 4f8:	08 95       	ret
	  }
	  else{
		  CLR_BIT(PORTC,pinnumber);
 4fa:	25 b3       	in	r18, 0x15	; 21
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	ac 01       	movw	r20, r24
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_vconnectpullup+0xbe>
 504:	44 0f       	add	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_vconnectpullup+0xba>
 50c:	ba 01       	movw	r22, r20
 50e:	60 95       	com	r22
 510:	62 23       	and	r22, r18
 512:	65 bb       	out	0x15, r22	; 21
 514:	08 95       	ret
	  }
	  break;
	  case'D':
	  if (connect_pullup==1){
 516:	41 30       	cpi	r20, 0x01	; 1
 518:	69 f4       	brne	.+26     	; 0x534 <DIO_vconnectpullup+0xea>
		  SET_BIT(PORTD,pinnumber);
 51a:	22 b3       	in	r18, 0x12	; 18
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	ac 01       	movw	r20, r24
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_vconnectpullup+0xde>
 524:	44 0f       	add	r20, r20
 526:	55 1f       	adc	r21, r21
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_vconnectpullup+0xda>
 52c:	ba 01       	movw	r22, r20
 52e:	62 2b       	or	r22, r18
 530:	62 bb       	out	0x12, r22	; 18
 532:	08 95       	ret
	  }
	  else{
		  CLR_BIT(PORTD,pinnumber);
 534:	22 b3       	in	r18, 0x12	; 18
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	ac 01       	movw	r20, r24
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_vconnectpullup+0xf8>
 53e:	44 0f       	add	r20, r20
 540:	55 1f       	adc	r21, r21
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_vconnectpullup+0xf4>
 546:	ba 01       	movw	r22, r20
 548:	60 95       	com	r22
 54a:	62 23       	and	r22, r18
 54c:	62 bb       	out	0x12, r22	; 18
 54e:	08 95       	ret

00000550 <write_low_nibble>:
	  break;
	}
}

void write_low_nibble (unsigned char portname,unsigned char  val){
	val&=0x0f;
 550:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname){
 552:	82 34       	cpi	r24, 0x42	; 66
 554:	89 f0       	breq	.+34     	; 0x578 <write_low_nibble+0x28>
 556:	83 34       	cpi	r24, 0x43	; 67
 558:	18 f4       	brcc	.+6      	; 0x560 <write_low_nibble+0x10>
 55a:	81 34       	cpi	r24, 0x41	; 65
 55c:	09 f5       	brne	.+66     	; 0x5a0 <write_low_nibble+0x50>
 55e:	05 c0       	rjmp	.+10     	; 0x56a <write_low_nibble+0x1a>
 560:	83 34       	cpi	r24, 0x43	; 67
 562:	89 f0       	breq	.+34     	; 0x586 <write_low_nibble+0x36>
 564:	84 34       	cpi	r24, 0x44	; 68
 566:	e1 f4       	brne	.+56     	; 0x5a0 <write_low_nibble+0x50>
 568:	15 c0       	rjmp	.+42     	; 0x594 <write_low_nibble+0x44>
		case'A':
		PORTA&=0xf0;
 56a:	8b b3       	in	r24, 0x1b	; 27
 56c:	80 7f       	andi	r24, 0xF0	; 240
 56e:	8b bb       	out	0x1b, r24	; 27
		PORTA|=val;
 570:	8b b3       	in	r24, 0x1b	; 27
 572:	68 2b       	or	r22, r24
 574:	6b bb       	out	0x1b, r22	; 27
		break;
 576:	08 95       	ret
		case'B':
		PORTB&=0xf0;
 578:	88 b3       	in	r24, 0x18	; 24
 57a:	80 7f       	andi	r24, 0xF0	; 240
 57c:	88 bb       	out	0x18, r24	; 24
		PORTB|=val;
 57e:	88 b3       	in	r24, 0x18	; 24
 580:	68 2b       	or	r22, r24
 582:	68 bb       	out	0x18, r22	; 24
		break;
 584:	08 95       	ret
		case'C':
		PORTC&=0xf0;
 586:	85 b3       	in	r24, 0x15	; 21
 588:	80 7f       	andi	r24, 0xF0	; 240
 58a:	85 bb       	out	0x15, r24	; 21
		PORTC|=val;
 58c:	85 b3       	in	r24, 0x15	; 21
 58e:	68 2b       	or	r22, r24
 590:	65 bb       	out	0x15, r22	; 21
		break;
 592:	08 95       	ret
		case'D':
		PORTD&=0xf0;
 594:	82 b3       	in	r24, 0x12	; 18
 596:	80 7f       	andi	r24, 0xF0	; 240
 598:	82 bb       	out	0x12, r24	; 18
		PORTD|=val;
 59a:	82 b3       	in	r24, 0x12	; 18
 59c:	68 2b       	or	r22, r24
 59e:	62 bb       	out	0x12, r22	; 18
 5a0:	08 95       	ret

000005a2 <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char val1)
{
	val1<<=4;
 5a2:	62 95       	swap	r22
 5a4:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 5a6:	82 34       	cpi	r24, 0x42	; 66
 5a8:	89 f0       	breq	.+34     	; 0x5cc <write_high_nibble+0x2a>
 5aa:	83 34       	cpi	r24, 0x43	; 67
 5ac:	18 f4       	brcc	.+6      	; 0x5b4 <write_high_nibble+0x12>
 5ae:	81 34       	cpi	r24, 0x41	; 65
 5b0:	09 f5       	brne	.+66     	; 0x5f4 <write_high_nibble+0x52>
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <write_high_nibble+0x1c>
 5b4:	83 34       	cpi	r24, 0x43	; 67
 5b6:	89 f0       	breq	.+34     	; 0x5da <write_high_nibble+0x38>
 5b8:	84 34       	cpi	r24, 0x44	; 68
 5ba:	e1 f4       	brne	.+56     	; 0x5f4 <write_high_nibble+0x52>
 5bc:	15 c0       	rjmp	.+42     	; 0x5e8 <write_high_nibble+0x46>
	{
		case 'A':
		PORTA&=0x0f;
 5be:	8b b3       	in	r24, 0x1b	; 27
 5c0:	8f 70       	andi	r24, 0x0F	; 15
 5c2:	8b bb       	out	0x1b, r24	; 27
		PORTA|=val1;
 5c4:	8b b3       	in	r24, 0x1b	; 27
 5c6:	68 2b       	or	r22, r24
 5c8:	6b bb       	out	0x1b, r22	; 27
		break;
 5ca:	08 95       	ret
		case 'B':
		PORTB&=0x0f;
 5cc:	88 b3       	in	r24, 0x18	; 24
 5ce:	8f 70       	andi	r24, 0x0F	; 15
 5d0:	88 bb       	out	0x18, r24	; 24
		PORTB|=val1;
 5d2:	88 b3       	in	r24, 0x18	; 24
 5d4:	68 2b       	or	r22, r24
 5d6:	68 bb       	out	0x18, r22	; 24
		break;
 5d8:	08 95       	ret
		case 'C':
		PORTC&=0x0f;
 5da:	85 b3       	in	r24, 0x15	; 21
 5dc:	8f 70       	andi	r24, 0x0F	; 15
 5de:	85 bb       	out	0x15, r24	; 21
		PORTC|=val1;
 5e0:	85 b3       	in	r24, 0x15	; 21
 5e2:	68 2b       	or	r22, r24
 5e4:	65 bb       	out	0x15, r22	; 21
		break;
 5e6:	08 95       	ret
		case 'D':
		PORTD&=0x0f;
 5e8:	82 b3       	in	r24, 0x12	; 18
 5ea:	8f 70       	andi	r24, 0x0F	; 15
 5ec:	82 bb       	out	0x12, r24	; 18
		PORTD|=val1;
 5ee:	82 b3       	in	r24, 0x12	; 18
 5f0:	68 2b       	or	r22, r24
 5f2:	62 bb       	out	0x12, r22	; 18
 5f4:	08 95       	ret

000005f6 <enable>:
	_delay_ms(1);
	#endif
}

static void enable(void){
	DIO_write(port_EN,EN,1);
 5f6:	82 e4       	ldi	r24, 0x42	; 66
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	41 e0       	ldi	r20, 0x01	; 1
 5fc:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 600:	8f e9       	ldi	r24, 0x9F	; 159
 602:	9f e0       	ldi	r25, 0x0F	; 15
 604:	01 97       	sbiw	r24, 0x01	; 1
 606:	f1 f7       	brne	.-4      	; 0x604 <enable+0xe>
 608:	00 c0       	rjmp	.+0      	; 0x60a <enable+0x14>
 60a:	00 00       	nop
	_delay_ms(2);
	DIO_write(port_EN,EN,0);
 60c:	82 e4       	ldi	r24, 0x42	; 66
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
 616:	8f e9       	ldi	r24, 0x9F	; 159
 618:	9f e0       	ldi	r25, 0x0F	; 15
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <enable+0x24>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <enable+0x2a>
 620:	00 00       	nop
	_delay_ms(2);
}
 622:	08 95       	ret

00000624 <LCD_vSend_cmd>:

void LCD_vSend_cmd (char port,char cmd){
	#if defined eight_bits_mode
	DIO_write_port(port,cmd);
 624:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_write_port>
	DIO_write(port_RS,RS,0);
 628:	82 e4       	ldi	r24, 0x42	; 66
 62a:	62 e0       	ldi	r22, 0x02	; 2
 62c:	40 e0       	ldi	r20, 0x00	; 0
 62e:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	enable();
 632:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <enable>
 636:	8f ec       	ldi	r24, 0xCF	; 207
 638:	97 e0       	ldi	r25, 0x07	; 7
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	f1 f7       	brne	.-4      	; 0x63a <LCD_vSend_cmd+0x16>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <LCD_vSend_cmd+0x1c>
 640:	00 00       	nop
	write_high_nibble(port,cmd);
	DIO_write(port_RS,RS,0);
	enable();
	#endif
	_delay_ms(1);
}
 642:	08 95       	ret

00000644 <LCD_vInit>:
#include "lcd1.h"
#define  F_CPU 8000000UL
#include <util/delay.h>


void LCD_vInit (char port){
 644:	cf 93       	push	r28
 646:	c8 2f       	mov	r28, r24
 648:	8f ef       	ldi	r24, 0xFF	; 255
 64a:	91 ee       	ldi	r25, 0xE1	; 225
 64c:	a4 e0       	ldi	r26, 0x04	; 4
 64e:	81 50       	subi	r24, 0x01	; 1
 650:	90 40       	sbci	r25, 0x00	; 0
 652:	a0 40       	sbci	r26, 0x00	; 0
 654:	e1 f7       	brne	.-8      	; 0x64e <LCD_vInit+0xa>
 656:	00 c0       	rjmp	.+0      	; 0x658 <LCD_vInit+0x14>
 658:	00 00       	nop
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_set_port_direction(port,0xff);
 65a:	8c 2f       	mov	r24, r28
 65c:	6f ef       	ldi	r22, 0xFF	; 255
 65e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <DIO_set_port_direction>
	DIO_vsetPINDir(port_EN,EN,1);
 662:	82 e4       	ldi	r24, 0x42	; 66
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	41 e0       	ldi	r20, 0x01	; 1
 668:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(port_RW,RW,1);
 66c:	82 e4       	ldi	r24, 0x42	; 66
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	41 e0       	ldi	r20, 0x01	; 1
 672:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(port_RS,RS,1);
 676:	82 e4       	ldi	r24, 0x42	; 66
 678:	62 e0       	ldi	r22, 0x02	; 2
 67a:	41 e0       	ldi	r20, 0x01	; 1
 67c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_write(port_RW,RW,0);
 680:	82 e4       	ldi	r24, 0x42	; 66
 682:	61 e0       	ldi	r22, 0x01	; 1
 684:	40 e0       	ldi	r20, 0x00	; 0
 686:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	LCD_vSend_cmd(port,EIGHT_BITS);
 68a:	8c 2f       	mov	r24, r28
 68c:	68 e3       	ldi	r22, 0x38	; 56
 68e:	0e 94 12 03 	call	0x624	; 0x624 <LCD_vSend_cmd>
 692:	af ec       	ldi	r26, 0xCF	; 207
 694:	b7 e0       	ldi	r27, 0x07	; 7
 696:	11 97       	sbiw	r26, 0x01	; 1
 698:	f1 f7       	brne	.-4      	; 0x696 <LCD_vInit+0x52>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <LCD_vInit+0x58>
 69c:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(port,CURSOR_ON_DISPLAY_ON);
 69e:	8c 2f       	mov	r24, r28
 6a0:	6e e0       	ldi	r22, 0x0E	; 14
 6a2:	0e 94 12 03 	call	0x624	; 0x624 <LCD_vSend_cmd>
 6a6:	8f ec       	ldi	r24, 0xCF	; 207
 6a8:	97 e0       	ldi	r25, 0x07	; 7
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <LCD_vInit+0x66>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <LCD_vInit+0x6c>
 6b0:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(port,CLR_SCREEN);		
 6b2:	8c 2f       	mov	r24, r28
 6b4:	61 e0       	ldi	r22, 0x01	; 1
 6b6:	0e 94 12 03 	call	0x624	; 0x624 <LCD_vSend_cmd>
 6ba:	af e1       	ldi	r26, 0x1F	; 31
 6bc:	be e4       	ldi	r27, 0x4E	; 78
 6be:	11 97       	sbiw	r26, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <LCD_vInit+0x7a>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <LCD_vInit+0x80>
 6c4:	00 00       	nop
	_delay_ms(10);	
	LCD_vSend_cmd(port,ENTRY_MODE);
 6c6:	8c 2f       	mov	r24, r28
 6c8:	66 e0       	ldi	r22, 0x06	; 6
 6ca:	0e 94 12 03 	call	0x624	; 0x624 <LCD_vSend_cmd>
 6ce:	8f ec       	ldi	r24, 0xCF	; 207
 6d0:	97 e0       	ldi	r25, 0x07	; 7
 6d2:	01 97       	sbiw	r24, 0x01	; 1
 6d4:	f1 f7       	brne	.-4      	; 0x6d2 <LCD_vInit+0x8e>
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <LCD_vInit+0x94>
 6d8:	00 00       	nop
	LCD_vSend_cmd(port,CLR_SCREEN);
	_delay_ms(10);
	LCD_vSend_cmd(port,ENTRY_MODE);
	_delay_ms(1);
	#endif
}
 6da:	cf 91       	pop	r28
 6dc:	08 95       	ret

000006de <LCD_vSend_char>:
	_delay_ms(1);
}

void LCD_vSend_char (char port,char data){
	#if defined eight_bits_mode
	DIO_write_port(port,data);
 6de:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_write_port>
	DIO_write(port_RS,RS,1);
 6e2:	82 e4       	ldi	r24, 0x42	; 66
 6e4:	62 e0       	ldi	r22, 0x02	; 2
 6e6:	41 e0       	ldi	r20, 0x01	; 1
 6e8:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	enable();
 6ec:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <enable>
 6f0:	8f ec       	ldi	r24, 0xCF	; 207
 6f2:	97 e0       	ldi	r25, 0x07	; 7
 6f4:	01 97       	sbiw	r24, 0x01	; 1
 6f6:	f1 f7       	brne	.-4      	; 0x6f4 <LCD_vSend_char+0x16>
 6f8:	00 c0       	rjmp	.+0      	; 0x6fa <LCD_vSend_char+0x1c>
 6fa:	00 00       	nop
	write_high_nibble(port,data);
	DIO_write(port_RS,RS,1);
	enable();
	#endif
	_delay_ms(1);
}
 6fc:	08 95       	ret

000006fe <LCD_vSend_string>:

void LCD_vSend_string (char port,char * data){
 6fe:	1f 93       	push	r17
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	18 2f       	mov	r17, r24
 706:	eb 01       	movw	r28, r22
	while((* data) != '\0'){
 708:	68 81       	ld	r22, Y
 70a:	66 23       	and	r22, r22
 70c:	39 f0       	breq	.+14     	; 0x71c <LCD_vSend_string+0x1e>
	enable();
	#endif
	_delay_ms(1);
}

void LCD_vSend_string (char port,char * data){
 70e:	21 96       	adiw	r28, 0x01	; 1
	while((* data) != '\0'){
		LCD_vSend_char(port,* data);
 710:	81 2f       	mov	r24, r17
 712:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSend_char>
	#endif
	_delay_ms(1);
}

void LCD_vSend_string (char port,char * data){
	while((* data) != '\0'){
 716:	69 91       	ld	r22, Y+
 718:	66 23       	and	r22, r22
 71a:	d1 f7       	brne	.-12     	; 0x710 <LCD_vSend_string+0x12>
		LCD_vSend_char(port,* data);
		data++;
	}	
	}
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	1f 91       	pop	r17
 722:	08 95       	ret

00000724 <LCD_clearscreen>:
	
void LCD_clearscreen(char port){
	LCD_vSend_cmd(port,CLR_SCREEN);
 724:	61 e0       	ldi	r22, 0x01	; 1
 726:	0e 94 12 03 	call	0x624	; 0x624 <LCD_vSend_cmd>
 72a:	8f e1       	ldi	r24, 0x1F	; 31
 72c:	9e e4       	ldi	r25, 0x4E	; 78
 72e:	01 97       	sbiw	r24, 0x01	; 1
 730:	f1 f7       	brne	.-4      	; 0x72e <LCD_clearscreen+0xa>
 732:	00 c0       	rjmp	.+0      	; 0x734 <LCD_clearscreen+0x10>
 734:	00 00       	nop
	_delay_ms(10);
}
 736:	08 95       	ret

00000738 <LCD_movecursor>:

void LCD_movecursor (char port,char row,char coloumn){
	char data;
	if(row>2 || row<1 || coloumn>16 || coloumn<1){
 738:	26 2f       	mov	r18, r22
 73a:	21 50       	subi	r18, 0x01	; 1
 73c:	22 30       	cpi	r18, 0x02	; 2
 73e:	70 f4       	brcc	.+28     	; 0x75c <LCD_movecursor+0x24>
 740:	41 31       	cpi	r20, 0x11	; 17
 742:	70 f4       	brcc	.+28     	; 0x760 <LCD_movecursor+0x28>
 744:	44 23       	and	r20, r20
 746:	71 f0       	breq	.+28     	; 0x764 <LCD_movecursor+0x2c>
		data=0x80;
	}
	else if (row==1){
 748:	61 30       	cpi	r22, 0x01	; 1
 74a:	19 f4       	brne	.+6      	; 0x752 <LCD_movecursor+0x1a>
		data = 0x80+coloumn-1;
 74c:	94 2f       	mov	r25, r20
 74e:	91 58       	subi	r25, 0x81	; 129
 750:	0a c0       	rjmp	.+20     	; 0x766 <LCD_movecursor+0x2e>
	}
	else if (row==2){
 752:	62 30       	cpi	r22, 0x02	; 2
 754:	41 f4       	brne	.+16     	; 0x766 <LCD_movecursor+0x2e>
		data = 0xc0+coloumn-1;
 756:	94 2f       	mov	r25, r20
 758:	91 54       	subi	r25, 0x41	; 65
 75a:	05 c0       	rjmp	.+10     	; 0x766 <LCD_movecursor+0x2e>
}

void LCD_movecursor (char port,char row,char coloumn){
	char data;
	if(row>2 || row<1 || coloumn>16 || coloumn<1){
		data=0x80;
 75c:	90 e8       	ldi	r25, 0x80	; 128
 75e:	03 c0       	rjmp	.+6      	; 0x766 <LCD_movecursor+0x2e>
 760:	90 e8       	ldi	r25, 0x80	; 128
 762:	01 c0       	rjmp	.+2      	; 0x766 <LCD_movecursor+0x2e>
 764:	90 e8       	ldi	r25, 0x80	; 128
		data = 0x80+coloumn-1;
	}
	else if (row==2){
		data = 0xc0+coloumn-1;
	}
	LCD_vSend_cmd(port,data);
 766:	69 2f       	mov	r22, r25
 768:	0e 94 12 03 	call	0x624	; 0x624 <LCD_vSend_cmd>
 76c:	8f ec       	ldi	r24, 0xCF	; 207
 76e:	97 e0       	ldi	r25, 0x07	; 7
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	f1 f7       	brne	.-4      	; 0x770 <LCD_movecursor+0x38>
 774:	00 c0       	rjmp	.+0      	; 0x776 <LCD_movecursor+0x3e>
 776:	00 00       	nop
	_delay_ms(1);
	
}
 778:	08 95       	ret

0000077a <LED_vInit>:


#include "DIO.h"

void LED_vInit (unsigned char portname,unsigned char pinnumber){
	DIO_vsetPINDir(portname,pinnumber,1);
 77a:	41 e0       	ldi	r20, 0x01	; 1
 77c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
}
 780:	08 95       	ret

00000782 <LED_vTurnON>:

void LED_vTurnON (unsigned char portname,unsigned char pinnumber){
	DIO_write(portname,pinnumber,1);
 782:	41 e0       	ldi	r20, 0x01	; 1
 784:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
}
 788:	08 95       	ret

0000078a <LED_vTurnOFF>:

void LED_vTurnOFF (unsigned char portname,unsigned char pinnumber){
	DIO_write(portname,pinnumber,0);
 78a:	40 e0       	ldi	r20, 0x00	; 0
 78c:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
}
 790:	08 95       	ret

00000792 <LED_vToggle>:

void LED_vToggle (unsigned char portname,unsigned char pinnumber){
	DIO_toggle(portname,pinnumber);
 792:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_toggle>
}
 796:	08 95       	ret

00000798 <LED_u8ReadStatus>:

unsigned char LED_u8ReadStatus (unsigned char portname,unsigned char pinnumber){
	return DIO_u8read(portname,pinnumber);
 798:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_u8read>
 79c:	08 95       	ret

0000079e <Timer_CTC_init_interrupt>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include "std_macrous.h"

void Timer_CTC_init_interrupt (void){
	SET_BIT(TCCR0,WGM01);
 79e:	83 b7       	in	r24, 0x33	; 51
 7a0:	88 60       	ori	r24, 0x08	; 8
 7a2:	83 bf       	out	0x33, r24	; 51
	OCR0 = 80;
 7a4:	80 e5       	ldi	r24, 0x50	; 80
 7a6:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,CS00);
 7a8:	83 b7       	in	r24, 0x33	; 51
 7aa:	81 60       	ori	r24, 0x01	; 1
 7ac:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 7ae:	83 b7       	in	r24, 0x33	; 51
 7b0:	84 60       	ori	r24, 0x04	; 4
 7b2:	83 bf       	out	0x33, r24	; 51
	
	sei();
 7b4:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 7b6:	89 b7       	in	r24, 0x39	; 57
 7b8:	82 60       	ori	r24, 0x02	; 2
 7ba:	89 bf       	out	0x39, r24	; 57
}
 7bc:	08 95       	ret

000007be <Timerwave_NonPWM>:

void Timerwave_NonPWM (void){
	
	SET_BIT(DDRB,3); //OC0 as output
 7be:	bb 9a       	sbi	0x17, 3	; 23
	SET_BIT(TCCR0,WGM01); //CTC mode
 7c0:	83 b7       	in	r24, 0x33	; 51
 7c2:	88 60       	ori	r24, 0x08	; 8
 7c4:	83 bf       	out	0x33, r24	; 51
	OCR0=64;
 7c6:	80 e4       	ldi	r24, 0x40	; 64
 7c8:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,CS00);
 7ca:	83 b7       	in	r24, 0x33	; 51
 7cc:	81 60       	ori	r24, 0x01	; 1
 7ce:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 7d0:	83 b7       	in	r24, 0x33	; 51
 7d2:	84 60       	ori	r24, 0x04	; 4
 7d4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM00); //TOGGLE OC0
 7d6:	83 b7       	in	r24, 0x33	; 51
 7d8:	80 61       	ori	r24, 0x10	; 16
 7da:	83 bf       	out	0x33, r24	; 51
 7dc:	08 95       	ret

000007de <main>:
int main(void)
{
	unsigned char green_counter=10;
	unsigned char yellow_counter=5;
	unsigned char red_counter=7;
	LED_vInit('D',0);
 7de:	84 e4       	ldi	r24, 0x44	; 68
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_vInit>
	LED_vInit('D',1);
 7e6:	84 e4       	ldi	r24, 0x44	; 68
 7e8:	61 e0       	ldi	r22, 0x01	; 1
 7ea:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_vInit>
	LED_vInit('D',2);
 7ee:	84 e4       	ldi	r24, 0x44	; 68
 7f0:	62 e0       	ldi	r22, 0x02	; 2
 7f2:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_vInit>
	LCD_vInit('A');
 7f6:	81 e4       	ldi	r24, 0x41	; 65
 7f8:	0e 94 22 03 	call	0x644	; 0x644 <LCD_vInit>
	Timer_CTC_init_interrupt();
 7fc:	0e 94 cf 03 	call	0x79e	; 0x79e <Timer_CTC_init_interrupt>
    {
		green_counter=10;
		yellow_counter=5;
		red_counter=7;
		LCD_clearscreen('A');
		LCD_vSend_string('A',"remaining 10 sec");
 800:	00 e6       	ldi	r16, 0x60	; 96
 802:	10 e0       	ldi	r17, 0x00	; 0
   
   _delay_ms(500);
   LED_vTurnOFF('D',0);
   LED_vTurnON('D',1);
   LCD_clearscreen('A');
   LCD_vSend_string('A',"remaining 5 sec");
 804:	0f 2e       	mov	r0, r31
 806:	f1 e7       	ldi	r31, 0x71	; 113
 808:	ef 2e       	mov	r14, r31
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	ff 2e       	mov	r15, r31
 80e:	f0 2d       	mov	r31, r0
	 
	  _delay_ms(500);
	  LED_vTurnOFF('D',1);
	  LED_vTurnON('D',2);
	  LCD_clearscreen('A');
	  LCD_vSend_string('A',"remaining 7 sec");
 810:	0f 2e       	mov	r0, r31
 812:	f1 e8       	ldi	r31, 0x81	; 129
 814:	cf 2e       	mov	r12, r31
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	df 2e       	mov	r13, r31
 81a:	f0 2d       	mov	r31, r0
    while(1)
    {
		green_counter=10;
		yellow_counter=5;
		red_counter=7;
		LCD_clearscreen('A');
 81c:	81 e4       	ldi	r24, 0x41	; 65
 81e:	0e 94 92 03 	call	0x724	; 0x724 <LCD_clearscreen>
		LCD_vSend_string('A',"remaining 10 sec");
 822:	81 e4       	ldi	r24, 0x41	; 65
 824:	b8 01       	movw	r22, r16
 826:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCD_vSend_string>
		LED_vTurnON('D',0);
 82a:	84 e4       	ldi	r24, 0x44	; 68
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	0e 94 c1 03 	call	0x782	; 0x782 <LED_vTurnON>
 832:	c9 e3       	ldi	r28, 0x39	; 57
 834:	16 c0       	rjmp	.+44     	; 0x862 <__stack+0x3>
		while(green_counter>00){
			if(counter>=100){
 836:	80 91 92 00 	lds	r24, 0x0092
 83a:	84 36       	cpi	r24, 0x64	; 100
 83c:	e0 f3       	brcs	.-8      	; 0x836 <main+0x58>
				counter=0;
 83e:	10 92 92 00 	sts	0x0092, r1
				green_counter--;
				LCD_movecursor('A',1,11);
 842:	81 e4       	ldi	r24, 0x41	; 65
 844:	61 e0       	ldi	r22, 0x01	; 1
 846:	4b e0       	ldi	r20, 0x0B	; 11
 848:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_movecursor>
				LCD_vSend_char('A',' ');
 84c:	81 e4       	ldi	r24, 0x41	; 65
 84e:	60 e2       	ldi	r22, 0x20	; 32
 850:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSend_char>
				LCD_vSend_char('A',green_counter+48);
 854:	81 e4       	ldi	r24, 0x41	; 65
 856:	6c 2f       	mov	r22, r28
 858:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSend_char>
 85c:	c1 50       	subi	r28, 0x01	; 1
		yellow_counter=5;
		red_counter=7;
		LCD_clearscreen('A');
		LCD_vSend_string('A',"remaining 10 sec");
		LED_vTurnON('D',0);
		while(green_counter>00){
 85e:	cf 32       	cpi	r28, 0x2F	; 47
 860:	29 f0       	breq	.+10     	; 0x86c <__stack+0xd>
			if(counter>=100){
 862:	80 91 92 00 	lds	r24, 0x0092
 866:	84 36       	cpi	r24, 0x64	; 100
 868:	30 f3       	brcs	.-52     	; 0x836 <main+0x58>
 86a:	e9 cf       	rjmp	.-46     	; 0x83e <main+0x60>
 86c:	8f ef       	ldi	r24, 0xFF	; 255
 86e:	94 e3       	ldi	r25, 0x34	; 52
 870:	ac e0       	ldi	r26, 0x0C	; 12
 872:	81 50       	subi	r24, 0x01	; 1
 874:	90 40       	sbci	r25, 0x00	; 0
 876:	a0 40       	sbci	r26, 0x00	; 0
 878:	e1 f7       	brne	.-8      	; 0x872 <__stack+0x13>
 87a:	00 c0       	rjmp	.+0      	; 0x87c <__stack+0x1d>
 87c:	00 00       	nop
				LCD_vSend_char('A',green_counter+48);
    }
}
   
   _delay_ms(500);
   LED_vTurnOFF('D',0);
 87e:	84 e4       	ldi	r24, 0x44	; 68
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_vTurnOFF>
   LED_vTurnON('D',1);
 886:	84 e4       	ldi	r24, 0x44	; 68
 888:	61 e0       	ldi	r22, 0x01	; 1
 88a:	0e 94 c1 03 	call	0x782	; 0x782 <LED_vTurnON>
   LCD_clearscreen('A');
 88e:	81 e4       	ldi	r24, 0x41	; 65
 890:	0e 94 92 03 	call	0x724	; 0x724 <LCD_clearscreen>
   LCD_vSend_string('A',"remaining 5 sec");
 894:	81 e4       	ldi	r24, 0x41	; 65
 896:	b7 01       	movw	r22, r14
 898:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCD_vSend_string>
 89c:	c4 e3       	ldi	r28, 0x34	; 52
 89e:	16 c0       	rjmp	.+44     	; 0x8cc <__stack+0x6d>
  
     while(yellow_counter>00){
	     if(counter>=100){
 8a0:	80 91 92 00 	lds	r24, 0x0092
 8a4:	84 36       	cpi	r24, 0x64	; 100
 8a6:	e0 f3       	brcs	.-8      	; 0x8a0 <__stack+0x41>
		     counter=0;
 8a8:	10 92 92 00 	sts	0x0092, r1
		     yellow_counter--;
		     LCD_movecursor('A',1,11);
 8ac:	81 e4       	ldi	r24, 0x41	; 65
 8ae:	61 e0       	ldi	r22, 0x01	; 1
 8b0:	4b e0       	ldi	r20, 0x0B	; 11
 8b2:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_movecursor>
		     LCD_vSend_char('A',' ');
 8b6:	81 e4       	ldi	r24, 0x41	; 65
 8b8:	60 e2       	ldi	r22, 0x20	; 32
 8ba:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSend_char>
		     LCD_vSend_char('A',yellow_counter+48);
 8be:	81 e4       	ldi	r24, 0x41	; 65
 8c0:	6c 2f       	mov	r22, r28
 8c2:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSend_char>
 8c6:	c1 50       	subi	r28, 0x01	; 1
   LED_vTurnOFF('D',0);
   LED_vTurnON('D',1);
   LCD_clearscreen('A');
   LCD_vSend_string('A',"remaining 5 sec");
  
     while(yellow_counter>00){
 8c8:	cf 32       	cpi	r28, 0x2F	; 47
 8ca:	29 f0       	breq	.+10     	; 0x8d6 <__stack+0x77>
	     if(counter>=100){
 8cc:	80 91 92 00 	lds	r24, 0x0092
 8d0:	84 36       	cpi	r24, 0x64	; 100
 8d2:	30 f3       	brcs	.-52     	; 0x8a0 <__stack+0x41>
 8d4:	e9 cf       	rjmp	.-46     	; 0x8a8 <__stack+0x49>
 8d6:	8f ef       	ldi	r24, 0xFF	; 255
 8d8:	94 e3       	ldi	r25, 0x34	; 52
 8da:	ac e0       	ldi	r26, 0x0C	; 12
 8dc:	81 50       	subi	r24, 0x01	; 1
 8de:	90 40       	sbci	r25, 0x00	; 0
 8e0:	a0 40       	sbci	r26, 0x00	; 0
 8e2:	e1 f7       	brne	.-8      	; 0x8dc <__stack+0x7d>
 8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <__stack+0x87>
 8e6:	00 00       	nop
		     LCD_vSend_char('A',yellow_counter+48);
	     }
     }
	 
	  _delay_ms(500);
	  LED_vTurnOFF('D',1);
 8e8:	84 e4       	ldi	r24, 0x44	; 68
 8ea:	61 e0       	ldi	r22, 0x01	; 1
 8ec:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_vTurnOFF>
	  LED_vTurnON('D',2);
 8f0:	84 e4       	ldi	r24, 0x44	; 68
 8f2:	62 e0       	ldi	r22, 0x02	; 2
 8f4:	0e 94 c1 03 	call	0x782	; 0x782 <LED_vTurnON>
	  LCD_clearscreen('A');
 8f8:	81 e4       	ldi	r24, 0x41	; 65
 8fa:	0e 94 92 03 	call	0x724	; 0x724 <LCD_clearscreen>
	  LCD_vSend_string('A',"remaining 7 sec");
 8fe:	81 e4       	ldi	r24, 0x41	; 65
 900:	b6 01       	movw	r22, r12
 902:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCD_vSend_string>
 906:	c6 e3       	ldi	r28, 0x36	; 54
 908:	16 c0       	rjmp	.+44     	; 0x936 <__stack+0xd7>
	  
	    while(red_counter>00){
		    if(counter>=100){
 90a:	80 91 92 00 	lds	r24, 0x0092
 90e:	84 36       	cpi	r24, 0x64	; 100
 910:	e0 f3       	brcs	.-8      	; 0x90a <__stack+0xab>
			  counter=0;
 912:	10 92 92 00 	sts	0x0092, r1
			  red_counter--;
			  LCD_movecursor('A',1,11);
 916:	81 e4       	ldi	r24, 0x41	; 65
 918:	61 e0       	ldi	r22, 0x01	; 1
 91a:	4b e0       	ldi	r20, 0x0B	; 11
 91c:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_movecursor>
			  LCD_vSend_char('A',' ');
 920:	81 e4       	ldi	r24, 0x41	; 65
 922:	60 e2       	ldi	r22, 0x20	; 32
 924:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSend_char>
			  LCD_vSend_char('A',red_counter+48);
 928:	81 e4       	ldi	r24, 0x41	; 65
 92a:	6c 2f       	mov	r22, r28
 92c:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_vSend_char>
 930:	c1 50       	subi	r28, 0x01	; 1
	  LED_vTurnOFF('D',1);
	  LED_vTurnON('D',2);
	  LCD_clearscreen('A');
	  LCD_vSend_string('A',"remaining 7 sec");
	  
	    while(red_counter>00){
 932:	cf 32       	cpi	r28, 0x2F	; 47
 934:	29 f0       	breq	.+10     	; 0x940 <__stack+0xe1>
		    if(counter>=100){
 936:	80 91 92 00 	lds	r24, 0x0092
 93a:	84 36       	cpi	r24, 0x64	; 100
 93c:	30 f3       	brcs	.-52     	; 0x90a <__stack+0xab>
 93e:	e9 cf       	rjmp	.-46     	; 0x912 <__stack+0xb3>
 940:	8f ef       	ldi	r24, 0xFF	; 255
 942:	94 e3       	ldi	r25, 0x34	; 52
 944:	ac e0       	ldi	r26, 0x0C	; 12
 946:	81 50       	subi	r24, 0x01	; 1
 948:	90 40       	sbci	r25, 0x00	; 0
 94a:	a0 40       	sbci	r26, 0x00	; 0
 94c:	e1 f7       	brne	.-8      	; 0x946 <__stack+0xe7>
 94e:	00 c0       	rjmp	.+0      	; 0x950 <__stack+0xf1>
 950:	00 00       	nop
			  LCD_vSend_char('A',red_counter+48);
		  }
	  }
	  
	  _delay_ms(500);
	  LED_vTurnOFF('D',2);
 952:	84 e4       	ldi	r24, 0x44	; 68
 954:	62 e0       	ldi	r22, 0x02	; 2
 956:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_vTurnOFF>
	  
	}
 95a:	60 cf       	rjmp	.-320    	; 0x81c <main+0x3e>

0000095c <__vector_10>:
}	
	
ISR (TIMER0_COMP_vect){
 95c:	1f 92       	push	r1
 95e:	0f 92       	push	r0
 960:	0f b6       	in	r0, 0x3f	; 63
 962:	0f 92       	push	r0
 964:	11 24       	eor	r1, r1
 966:	8f 93       	push	r24
	
	counter++;
 968:	80 91 92 00 	lds	r24, 0x0092
 96c:	8f 5f       	subi	r24, 0xFF	; 255
 96e:	80 93 92 00 	sts	0x0092, r24
 972:	8f 91       	pop	r24
 974:	0f 90       	pop	r0
 976:	0f be       	out	0x3f, r0	; 63
 978:	0f 90       	pop	r0
 97a:	1f 90       	pop	r1
 97c:	18 95       	reti

0000097e <_exit>:
 97e:	f8 94       	cli

00000980 <__stop_program>:
 980:	ff cf       	rjmp	.-2      	; 0x980 <__stop_program>
